# LoyalCodingExercise
For any questions, feel free to email mharaguchi07@gmail.com or call me at 801-382-8001.

## Prerequisites
Requires .NET 6, npm, Docker, React.

## Setup
- Download a 5-core Amazon review file (tested with Musical Instruments, Toys and Games, and Electronics) from http://jmcauley.ucsd.edu/data/amazon/ and extract GZ file.
- Create folder \src\LoyalCodingExercise.Api\data
- Add a 5-core Amazon review JSON file to the \src\LoyalCodingExercise.Api\data folder.
- Modify \src\LoyalCodingExercise.Api\appsettings.json FileSystemReviewRepositoryOptions > FilePath to reflect the correct JSON file. Make sure it has the relative path "data/" at the start.

## Build/Run
- From \ folder (should have .sln and docker-compose.yaml files), run "docker compose up --build".
<br>The console log entries should show when data training is finished.

## API Swagger
Assuming port 8139 was free and the Docker container started correctly, the API's Swagger page should be accessible at http://localhost:8139/Swagger.
The page will not be accessible until the data training has finished.

## React Website
<<<<<<< HEAD
Assuming port 3113 was free and the Docker container started correctly, the API's Swagger page should be accessible at http://localhost:3113. Press the Generate Review button to show a review and its associated star rating. If the API isn't ready yet, the website will throw errors in the JS console.
=======
Assuming the port 3113 was free and the Docker container started correctly, the website should be accessible at http://localhost:3113. Press the Generate Review button to show a review and its associated star rating. Will throw errors in the console until the API is done training data.
>>>>>>> origin/main

## Troubleshooting
If the docker compose command isn't working, the API can be started from Visual Studio using IIS Express or Docker. The website can be started from the \web\review-generator\ folder by running "npm start", but the fetch URL will need to be manually updated with whatever port the API is running on.

## Notes
- Has 2 review text generator implementations, one custom built (about 75% done), one based on the Markov NuGet package. Currently set to be the NuGet package version as the custom solution was too slow for large datasets.
- Has 2 different stars generator implementations, one random, one basic sentiment-based. Currently set to be the sentiment-based version.
<<<<<<< HEAD
- API config has a permissive CORS policy to try to avoid issues. Prod would need to be more restrictive.
- Docker build for the website needs optimization. It takes forever on first run, but I didn't want to spend time looking into it.

# Requirements

## Deliverables
<br>Requirement: Include a README.md with instructions to build and run your project
<br>Addressed: This doc
<br>
<br>Requirement: Ensure that your GitHub profile has your full name on it or include in README
<br>Addressed: GH profile has full name, but just to double cover, this code is from Mark Haraguchi
<br>
<br>Requirement: ASP.Net Core application with /API/generate endpoint that contains autogenerated review and star rating
<br>Addressed: LoyalCodingExercise.API project.
<br>
<br>Requirement: Ingest/train your data in program startup
<br>Addressed: Running "app.Services.GetRequiredService<IReviewTextGenerator>();" in Program.cs.
<br>
<br>Requirement: Create a private GitHub repo with your solution, and add @badampowell as a collaborator
<br>Addressed: Private GH repo in my profile https://github.com/mharaguchi. Adding @badampowell as soon as I get this README finished.

## Bonus Requirements
Requirement: Unit test your project
<br>Addressed: Created LoyalCodingExercise.Core.Tests project & added some tests for the NuGet-package-based review text generator and the 2 stars generators. Would normally add controller tests and manager tests and others, but I didn't want to take too long on this part.
<br>
<br>Requirement: Add a user-friendly front end
<br>Addressed: Created a very basic React app that should start with the docker compose command. When the "Generate Review" button is pressed, a set of star images and the review text should appear below the button.
<br>
<br>Requirement: Host your application in Azure
<br>Not Included
<br>
<br>Requirement: Dockerize your application
<br>Addressed: Both the API and the front end have a Dockerfile and the whole system should run with docker compose as described above.
<br>
<br>Requirement: Replace randomized star rating with a sentiment analysis
<Br>Addressed: Created a very basic sentiment-based stars generator that goes through the words in the generated review text and scores it based on the ratio of positive and negative words. Mostly generates 3s and 5s but I've seen every star value returned.
=======
- API config has a permissive CORS policy to try to avoid issues
- Docker build for the website needs optimization. It takes forever on first run, but I didn't have time to look into it anymore.
>>>>>>> origin/main
